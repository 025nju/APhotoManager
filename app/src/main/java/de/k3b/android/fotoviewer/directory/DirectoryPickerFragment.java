package de.k3b.android.fotoviewer.directory;

import android.app.Activity;
import android.app.Dialog;
import android.app.DialogFragment;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.os.SystemClock;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ExpandableListView;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import de.k3b.android.fotoviewer.queries.FotoViewerParameter;
import de.k3b.android.fotoviewer.Global;
import de.k3b.android.fotoviewer.R;
import de.k3b.android.fotoviewer.queries.FotoSql;
import de.k3b.android.fotoviewer.queries.QueryParameterParcelable;
import de.k3b.android.fotoviewer.queries.Queryable;
import de.k3b.database.QueryParameter;
import de.k3b.io.Directory;
import de.k3b.io.DirectoryBuilder;
import de.k3b.io.DirectoryNavigator;

import java.util.List;

/**
 * A fragment with a Listing of Directories.
 *
 * [pathBar]
 * [treeView]
 *
 * Activities that contain this fragment must implement the
 * {@link OnDirectoryInteractionListener} interface
 * to handle interaction events.
 */
public class DirectoryPickerFragment extends DialogFragment implements Queryable {

    private static final String TAG = "DirFragment";

    // public state
    private Directory currentSelection = null;

    // Layout
    private HorizontalScrollView pathBarScroller;
    private LinearLayout pathBar;
    private ExpandableListView treeView;
    private TextView status = null;
    private Button cmdOk = null;
    private Button cmdCancel = null;

    // local data
    protected Activity mContext;
    private DirectoryListAdapter mAdapter;
    private DirectoryNavigator mNavigation;

    /** the content of this fragment */
    private QueryParameterParcelable mParameters = null;

    // api to fragment owner
    private OnDirectoryInteractionListener mListener;

    // false embedded fragment; true dialog
    private boolean asDialog = false;

    // onsorted generated by ide-s autocomplete


    public DirectoryPickerFragment() {
        // Required empty public constructor
    }

    /****** live cycle ********/
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_directory, container, false);

        mContext = this.getActivity();

        // if requery has not been called before: getFrom to default
        if (mParameters == null) {
            mParameters = new QueryParameterParcelable(FotoViewerParameter.currentDirContentQuery);
            mParameters.getOrderByFrom(FotoViewerParameter.currentDirOrderByQuery, false);
        }

        this.pathBar = (LinearLayout) view.findViewById(R.id.path_owner);
        this.pathBarScroller = (HorizontalScrollView) view.findViewById(R.id.path_scroller);

        treeView = (ExpandableListView)view.findViewById(R.id.directory_tree);
        treeView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
            @Override
            public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
                return DirectoryPickerFragment.this.onChildDirectoryClick(childPosition, mNavigation.getChild(groupPosition, childPosition));
            }
        });
        treeView.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {
            @Override
            public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {
                return DirectoryPickerFragment.this.onParentDirectoryClick(mNavigation.getGroup(groupPosition));
            }
        });


        if (asDialog) {
            onCreateViewDialog(view);
        }

        requery(mContext, mParameters);

        return view;
    }

    /** handle init for dialog-only controlls: cmdOk, cmdCancel, status */
    private void onCreateViewDialog(View view) {
        this.status = (TextView) view.findViewById(R.id.status);
        this.status.setVisibility(View.VISIBLE);
        this.cmdOk = (Button) view.findViewById(R.id.cmd_ok);
        this.cmdOk.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d(Global.LOG_CONTEXT, "Frag-Dir:onOk: " + currentSelection);
                mListener.onDirectoryPick(currentSelection, mParameters.getID());
                dismiss();
            }
        });
        cmdOk.setVisibility(View.VISIBLE);
        final Button cmdCancel = (Button) view.findViewById(R.id.cmd_cancel);
        cmdCancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d(Global.LOG_CONTEXT, "Frag-Dir:onCancel: " + currentSelection);
                mListener.onDirectoryCancel(mParameters.getID());
                dismiss();
            }
        });
        cmdCancel.setVisibility(View.VISIBLE);

        String title = mContext.getString(
                R.string.directory_fragment_dialog_title,
                mContext.getString(mParameters.getID()));
        getDialog().setTitle(title);
        // no api for setIcon ????
    }

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        Dialog result = super.onCreateDialog(savedInstanceState);
        this.asDialog = true;

        return result;
    };

    /**
     * interface Queryable: Initiates a database requery
     */
    public void requery(Activity context, QueryParameterParcelable parameters) {
        if (Global.debugEnabled) {
            Log.i(Global.LOG_CONTEXT, "DirectoryPickerFragment.requery " + ((parameters != null) ? parameters.toSqlString():null));
        }

        this.mParameters = parameters;
        if (this.treeView != null) {
            // only if onCreateView() has already been called

            String title = mContext.getString(
                    R.string.directory_fragment_requery_title,
                    mContext.getString(mParameters.getID()));

            Toast.makeText(mContext, title, Toast.LENGTH_SHORT);
            getDialog().setTitle(title);

            Directory directories = getDirectories(parameters);
            mNavigation = new DirectoryNavigator(directories);

            mAdapter = new DirectoryListAdapter(context,
                    mNavigation, treeView);
            treeView.setAdapter(mAdapter);

            updatePathBar(parameters.getCurrentSelection());
        }
    }

    public Directory getDirectories(QueryParameter parameters) {
        /// TODO getFrom from intent/sql
        if (Global.demoMode) {
            Directory directories = DirectoryLoader.getDirectories();
            DirectoryBuilder.createStatistics(directories.getChildren());
            return directories;
        } else {

            if (Global.debugEnabled) Log.i(Global.LOG_CONTEXT, this.getClass().getSimpleName() + " query " + parameters.toSqlString());
            // requery(parameters.toOrderBy(), parameters.toAndroidParameters());
            Cursor cursor = mContext.getContentResolver().query(Uri.parse(parameters.toFrom()), parameters.toColumns(),
                    parameters.toAndroidWhere(), parameters.toAndroidParameters(), parameters.toOrderBy());
            DirectoryBuilder builder = new DirectoryBuilder();

            long startTime = SystemClock.currentThreadTimeMillis();
            int colText = cursor.getColumnIndex(FotoSql.SQL_COL_DESCRIPTION);
            int colCount = cursor.getColumnIndex(FotoSql.SQL_COL_COUNT);
            while (cursor.moveToNext()) {
                builder.add(cursor.getString(colText), cursor.getInt(colCount));
            }

            // Don't need the cursor any more.
            cursor.close();
            return builder.getRoot();
        }
    }

    public void onResume() {
        super.onResume();
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            mListener = (OnDirectoryInteractionListener) activity;
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnDirectoryInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    /*********************** gui interaction *******************************************/
    private boolean onParentDirectoryClick(Directory dir) {
        updatePathBar(dir);
        notifySelectionChanged(dir);
        return false;
    }

    private boolean onChildDirectoryClick(int childPosition, Directory selectedChild) {
        Log.d(TAG, "onChildDirectoryClick(" +
                selectedChild.getAbsolute() + ")");

        // naviationchange only if there are children below child
        Directory newGrandParent = ((selectedChild != null) && (selectedChild.getDirCount() > 0)) ? selectedChild.getParent() : null;

        navigateTo(childPosition, newGrandParent);
        updatePathBar(selectedChild);
        notifySelectionChanged(selectedChild);
        return false;
    }

    private void onPathBarButtonClick(Directory selectedChild) {
        Log.d(TAG, "onPathBarButtonClick(" +
                selectedChild.getAbsolute() + ")");

        // naviationchange only if there are children below child
        Directory newGrandParent = ((selectedChild != null) && (selectedChild.getDirCount() > 0)) ? selectedChild.getParent() : null;
        List<Directory> siblings = (newGrandParent != null) ? newGrandParent.getChildren() : null;

        if (siblings != null) {
            int childPosition = siblings.indexOf(selectedChild);
            navigateTo(childPosition, newGrandParent);
        }
        updatePathBar(selectedChild);
        notifySelectionChanged(selectedChild);
    }

    private void notifySelectionChanged(Directory selectedChild) {
        if (mListener != null) mListener.onDirectorySelectionChanged(selectedChild, mParameters.getID());
    }

    private void updateStatus() {
        int itemCount = getItemCount(currentSelection);
        boolean canPressOk = (itemCount > 0);

        if (cmdOk != null) cmdOk.setEnabled(canPressOk);

        if (status != null) {
            if (canPressOk) {
                status.setText(this.currentSelection.getAbsolute());
            } else {
                status.setText(R.string.no_dir_selected);
            }
        }
    }

    private int getItemCount(Directory directory) {
        if (directory == null) return 0;
        return (FotoViewerParameter.includeSubItems)
                        ? directory.getNonDirSubItemCount()
                        : directory.getNonDirItemCount();
    }

    /*********************** local helper *******************************************/
    private void updatePathBar(String currentSelection) {
        if (this.mNavigation != null) {
            updatePathBar(this.mNavigation.getRoot().find(currentSelection));
        }
    }

    private void updatePathBar(Directory selectedChild) {
        pathBar.removeAllViews();

        if (selectedChild != null) {

            Button first = null;
            Directory current = selectedChild;
            while (current.getParent() != null) {
                Button button = createPathButton(current);
                // add parent left to chlild
                // gui order root/../child.parent/child
                pathBar.addView(button, 0);
                if (first == null) first = button;
                current = current.getParent();
            }

            // scroll to right where deepest child is
            pathBarScroller.requestChildFocus(pathBar, first);
        }

        if (selectedChild != this.currentSelection) {
            this.currentSelection = selectedChild;
        }
        updateStatus();
    }

    private Button createPathButton(Directory currentDir) {
        Button result = new Button(getActivity());
        result.setTag(currentDir);
        result.setText(DirectoryListAdapter.getText(null, currentDir, (FotoViewerParameter.includeSubItems) ? Directory.OPT_SUB_ITEM : Directory.OPT_ITEM ));

        result.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onPathBarButtonClick((Directory) v.getTag());
            }
        });
        return result;
    }

    /** reload tree to new newGrandParent by preserving selection */
    private void navigateTo(int newGroupSelection, Directory newGrandParent) {
        if (newGrandParent != null) {
            Log.d(TAG, "=> setCurrentGrandFather(" +
                    newGrandParent.getAbsolute() + ")");
            mNavigation.setCurrentGrandFather(newGrandParent);
            this.treeView.setAdapter(mAdapter);
            if (newGroupSelection >= 0) {
                /// find selectedChild as new selectedGroup and expand it
                treeView.expandGroup(newGroupSelection, true);
            }
        }
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p/>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnDirectoryInteractionListener {
        /** called when user picks a new directory */
        void onDirectoryPick(Directory newSelection, int queryTypeId);

        /** called when user cancels picking of a new directory
         * @param queryTypeId*/
        void onDirectoryCancel(int queryTypeId);

        /** called after the selection in tree has changed */
        void onDirectorySelectionChanged(Directory selectedChild, int queryTypeId);
    }
}
